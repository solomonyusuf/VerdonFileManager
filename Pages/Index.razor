@page "/"
@using Microsoft.AspNetCore.Mvc
@inject UploadService _upload



<PageTitle>Dashboard</PageTitle>

<div class="block-header">
    <div class="row">
        <div class="col-lg-7 col-md-6 col-sm-12">
            <h2>File Manager</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="index.html"><i class="zmdi zmdi-home"></i> File Manager</a></li>
                <li class="breadcrumb-item active">Dashboard</li>
            </ul>
            <button class="btn btn-primary btn-icon mobile_menu" type="button"><i class="zmdi zmdi-sort-amount-desc"></i></button>
        </div>
        <div class="col-lg-5 col-md-6 col-sm-12">
            <button class="btn btn-success btn-icon float-right" type="button"><i class="zmdi zmdi-upload"></i></button>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="row clearfix">
        <div class="col-lg-3 col-md-6 col-sm-12">
            <div class="card widget_2">
                <div class="body big_icon storage">
                    <h6>Storage</h6>
                    <h2>@(total/divisor)MB <small class="info">of @(storage/divisor)GB</small></h2>
                    <div class="progress m-t-10">
                        <div class="progress-bar l-green" role="progressbar" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: @((vtotal/divisor) * 100)%;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-12">
            <div class="card widget_2">
                <div class="body big_icon documents">
                    <h6>Documents</h6>
                    <h2>@(doc / divisor)MB <small class="info">of @(storage / divisor)GB</small></h2>
                    <div class="progress m-t-10">
                        <div class="progress-bar l-blush" role="progressbar" aria-valuenow="12" aria-valuemin="0" aria-valuemax="100" style="width: @((vdoc/divisor) * 100)%;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-12">
            <div class="card widget_2">
                <div class="body big_icon images">
                    <h6>Images</h6>
                    <h2>@(images / divisor)MB <small class="info">of @(storage / divisor)GB</small></h2>
                    <div class="progress m-t-10">
                        <div class="progress-bar l-blue" role="progressbar" aria-valuenow="89" aria-valuemin="0" aria-valuemax="100" style="width: @((vimage /divisor) * 100)%;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 col-sm-12">
            <div class="card widget_2">
                <div class="body big_icon media_w">
                    <h6>Media</h6>
                    <h2>@(media / divisor)MB <small class="info">of @(storage / divisor)GB</small></h2>
                    <div class="progress m-t-10">
                        <div class="progress-bar l-purple" role="progressbar" aria-valuenow="39" aria-valuemin="0" aria-valuemax="100" style="width: @((vmedia/divisor) * 100)%;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="card">
                 <h4>How to use API</h4>
                <div class="table-responsive">
                    <table class="table table-hover mb-0 c_table">
                        <thead>
                            <tr>
                                <th>API PATH</th>
                                <th data-breakpoints="xs">DIRECTIVE</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><span><i class="zmdi zmdi-folder w25"></i> @NavigationManager.BaseUri verdon.filemanager.api/{ UploadToken }</span></td>
                                <td>Ensure to create a folder to get an UploadToken so your static files can be saved <br/> in the folder you created. when making a request use the api path above
                                                       <br/> and ensure to add the upload token of the folder you added when making a request.<br/>
                                                       when making a form-data request send your file object with the keyValue of { _file }<br />  
                                                       followed by your file for request.
                                </td>
                            </tr>
                            <tr>
                                <td><span><i class="zmdi zmdi-folder w25"></i> @NavigationManager.BaseUri verdon.filemanager.api/delete/{ UploadToken }/{ fileId }</span></td>
                                <td>
                                    To delete file pass UploadToken and file ID in the route of the api to remove the file.
                                </td>
                            </tr>
                            
                        </tbody>
                    </table>
                    <div>

                        <a target="_blank" href="/Postman - Google Chrome 2_13_2023 7_07_17 AM (2).png">
                            <img src="Postman - Google Chrome 2_13_2023 7_07_17 AM (2).png" style="height:300px;" />
                        </a>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@inject NavigationManager NavigationManager
@inject UserManager<AppUser> _user
@inject ApplicationDbContext _db
@inject IHttpContextAccessor _cont

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    public long storage = (1024 * 1024 * 10);
    public long doc, media, images, total, divisor = (1024 * 1024);
    public long vdoc, vmedia, vimage, vtotal;
    public string Id;
    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        await SetUp();
        await StorageQuery();
    }


    async Task StorageQuery()
    {
        try
        {
            doc = await _db.FileData.Where(x => x.UserId.Equals(Id) && x.Extension.Contains("application")).Select(x => x.Size).SumAsync();
            media = await _db.FileData.Where(x => x.UserId.Equals(Id) && x.Extension.Contains("video") || x.Extension.Contains("audio")).Select(x => x.Size).SumAsync();
            images = await _db.FileData.Where(x => x.UserId.Equals(Id) && x.Extension.Contains("image")).Select(x => x.Size).SumAsync();
            total = await _db.FileData.Where(x => x.UserId.Equals(Id)).Select(x => x.Size).SumAsync();
            vdoc = (doc / storage);
            vmedia = (media / storage);
            vimage = (images / storage);
            vtotal = (total / storage);
            var s = (vtotal / divisor) * 100;
            _cont.HttpContext.Session.SetString("Total", s.ToString());
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task SetUp()
    {
        try
        {
            var user = (await AuthStat).User;
            if (!user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"{NavigationManager.BaseUri}Identity/Account/Login?returnUrl=~%2F", true);
            }
            else
            {
                var s = await _user.FindByEmailAsync(user.Identity.Name);
                if(s.Id != null)
                    _cont.HttpContext.Session.SetString("UserId", s.Id);

                if(s.FirstName != null && s.Image != null)
                {
                    Id = s.Id;
                    _cont.HttpContext.Session.SetString("FName", s.FirstName);
                    _cont.HttpContext.Session.SetString("Image", s.Image);
                }
                else
                {
                   NavigationManager.NavigateTo($"/settings");
                }

               
            }
        }
        catch(Exception e)
        {
            Console.WriteLine(e);
        }
    }
}