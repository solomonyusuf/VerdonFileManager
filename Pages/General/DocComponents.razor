@page "/Documents"
@inject ApplicationDbContext _db
@inject ToastService _toast
@inject UploadService _upload
@inject NavigationManager router
@inject IHttpContextAccessor _cont


<PageTitle>Documents</PageTitle>



<div class="block-header">
    <div class="row">
        <div class="col-lg-7 col-md-6 col-sm-12">
            <h2>File Manager</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="/"><i class="zmdi zmdi-home"></i> File Manager</a></li>
                <li class="breadcrumb-item active">Folder / Documents</li>
            </ul>
            <button class="btn btn-primary btn-icon mobile_menu" type="button"><i class="zmdi zmdi-sort-amount-desc"></i></button>
        </div>
    </div>
</div>


<div class="container-fluid">
    <div class="row clearfix">
        <div class="col-lg-12">
            <div class="card">
                <ul class="nav nav-tabs pl-0 pr-0">
                    <li class="nav-item"><a class="nav-link active" data-toggle="tab" href="#list_view">List View</a></li>
                    <li class="nav-item"><a class="nav-link" data-toggle="tab" href="#tab2">Grid View</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="list_view">
                        <Grid AllowSorting="true" TItem="@FileData" class="table table-hover table-bordered table-striped" DataProvider="FolderDataProvider" AllowPaging="true" PageSize="10" AllowFiltering="true" Responsive="true">
                            <GridColumn TItem="FileData" HeaderText="Name" PropertyName="Name" SortKeySelector="item => item.Name">
                                @if (context.Extension.Contains("jpg") || context.Extension.Contains("png") || context.Extension.Contains("jpeg"))
                                {
                                    <div class="icon">
                                        <img style="border-radius:50px;height:100px;width:100px;" src="@context.Path" class="btn-round" /><br/>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("mp3"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-playlist-audio w25"></i>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("mp4"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-video w25"></i>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("mkv"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-collection-folder-image w25"></i>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("xls"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-chart w25"></i>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("pdf"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-collection-pdf w25"></i>  @context.Name
                                    </div>
                                }
                                @if (context.Extension.Contains("doc") || context.Extension.Contains("docx") || context.Extension.Contains("txt"))
                                {
                                    <div class="icon">
                                        <i class="zmdi zmdi-file-text w25"></i>  @context.Name
                                    </div>
                                }
                            
                            </GridColumn>
                            <GridColumn TItem="FileData" HeaderText="Upload Token" PropertyName="UploadToken" SortKeySelector="item => item.UploadToken">
                                @context.UploadToken
                            </GridColumn>
                            <GridColumn TItem="FileData" HeaderText="Size" PropertyName="Size" SortKeySelector="item => item.Size">
                                    @if ((context.Size) > (1024 * 1024))
                                    {
                                        <strong>@((context.Size) / (1024 * 1024)) MB</strong>
                                    }
                                    @if ((context.Size) < (1024 * 1024))
                                    {
                                         <strong>@(context.Size / 1024) KB </strong>
                                    }
                            </GridColumn>
                            <GridColumn TItem="FileData" HeaderText="Created Date" PropertyName="CreatedDate" SortKeySelector="item => item.CreatedDate">
                                @context.CreatedDate
                            </GridColumn>
                            <GridColumn TItem="FileData">
                                 <button @onclick="@(()=> Remove(context))" type="button" class="btn btn-icon btn-icon-mini btn-round btn-danger">
                                    <i class="zmdi zmdi-delete"></i>
                                </button>
                                <a href="/@context.Path" target="_blank" type="button" class="btn btn-icon btn-icon-mini btn-round btn-primary">
                                    <i class="zmdi zmdi-eye"></i>
                                </a>
                             </GridColumn>
                        </Grid>
                    </div>
                    <div class="tab-pane file_manager" id="tab2">
                        <div class="row clearfix">

                            @if (models.Count() != 0)
                            {
                                @foreach (var item in models)
                                {
                                    <div class="col-lg-3 col-md-4 col-sm-12">
                                        <div class="card">
                                            <a class="file">
                                                @if (item.Extension.Contains("image"))
                                                {
                                                    <div class="icon">
                                                        <img src="@item.Path" />
                                                    </div>
                                                }
                                                @if (item.Extension.Contains("audio"))
                                                {
                                                    <div class="icon">
                                                        <i class="zmdi zmdi-audio w25"></i>
                                                    </div>
                                                }
                                                @if (item.Extension.Contains("video"))
                                                {
                                                    <div class="icon">
                                                        <i class="zmdi zmdi-video w25"></i>
                                                    </div>
                                                }

                                                @if (item.Extension.Contains("xls"))
                                                {
                                                    <div class="icon">
                                                        <i class="zmdi zmdi-chart w25"></i>
                                                    </div>
                                                }
                                                @if (item.Extension.Contains("pdf"))
                                                {
                                                    <div class="icon">
                                                        <i class="zmdi zmdi-collection-pdf w25"></i>
                                                    </div>
                                                }
                                                @if (item.Extension.Contains("doc") || item.Extension.Contains("docx") || item.Extension.Contains("txt"))
                                                {
                                                    <div class="icon">
                                                        <i class="zmdi zmdi-file-text w25"></i>
                                                    </div>
                                                }
                                                <div class="file-name">
                                                    <p class="text-muted">@item.Name</p>
                                                    <p>
                                                        <small>
                                                            @if ((item.Size) > (1024 * 1024))
                                                            {
                                                                <strong>@((item.Size) / (1024 * 1024)) MB</strong>
                                                            }
                                                            @if ((item.Size) < (1024 * 1024))
                                                            {
                                                                <strong>@(item.Size / 1024) KB </strong>
                                                            }
                                                            | @item.CreatedDate.ToLongDateString()
                                                        </small>
                                                    </p>

                                                    <div>
                                                        <button @onclick="@(()=> Remove(item))" type="button" class="btn btn-icon btn-icon-mini btn-round btn-danger">
                                                            <i class="zmdi zmdi-delete"></i>
                                                        </button>
                                                        <a href="/@item.Path" target="_blank" type="button" class="btn btn-icon btn-icon-mini btn-round btn-primary">
                                                            <i class="zmdi zmdi-eye"></i>
                                                        </a>
                                                    </div>
                                                </div>
                                            </a>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<ConfirmDialog @ref="DeleteDialog" />


@code {
    [Parameter]
    public string? Id { get; set; }
    private ConfirmDialog? DeleteDialog;
    public List<FileData> models = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetAll();

    }

    async Task GetAll()
    {
       try
       {
            models = await _db.FileData.Where(x => x.Extension.Contains("doc")
            || x.Extension.Contains("txt")
            || x.Extension.Contains("docx")
            || x.Extension.Contains("pdf")
            || x.Extension.Contains("xls")
            || x.Extension.Contains("xlxs")
            || x.Extension.Contains("accdb")
            || x.Extension.Contains("ptt")
            && x.UserId == _cont.HttpContext.Session.GetString("UserId")).ToListAsync();
       }
        catch (Exception e)
        {
            _toast.Notify(new ToastMessage(ToastType.Danger, $"An error occured."));
            Console.WriteLine(e);
        }
    }

    async Task Remove(FileData f)
    {
        try
        {

            var confirmation = await DeleteDialog.ShowAsync(title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.", confirmDialogOptions: new ConfirmDialogOptions { Dismissable = true });
            if (confirmation)
            {

                _db.FileData.Remove(f);
                await _db.SaveChangesAsync();
                File.Delete(f.Path);
                StateHasChanged();
                _toast.Notify(new ToastMessage(ToastType.Success, $"Data deleted successfully."));
            }

        }
        catch (Exception e)
        {
            _toast.Notify(new ToastMessage(ToastType.Danger, $"An error occured."));
            Console.WriteLine(e);
        }
    }

    private async Task<GridDataProviderResult<FileData>> FolderDataProvider(GridDataProviderRequest<FileData> request)
    {
        return await Task.FromResult(request.ApplyTo(models));
    }
}
